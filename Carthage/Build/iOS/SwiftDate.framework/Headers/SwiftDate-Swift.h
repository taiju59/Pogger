// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSDateComponents;

@interface NSCalendar (SWIFT_EXTENSION(SwiftDate))

/// Returns a new NSDateComponents object containing the calendar as specified by the receiver
@property (nonatomic, readonly, strong) NSDateComponents * _Nonnull calendar;
@end

@class NSDate;
@class NSDateInterval;

@interface NSCalendar (SWIFT_EXTENSION(SwiftDate))

/// Revised API for avoiding usage of AutoreleasingUnsafeMutablePointer. The current exposed API in Foundation on Darwin platforms is: public func rangeOfUnit(unit: NSCalendarUnit, startDate datep: AutoreleasingUnsafeMutablePointer<NSDate?>, interval tip: UnsafeMutablePointer<NSTimeInterval>, forDate date: NSDate) -> Bool which is not implementable on Linux due to the lack of being able to properly implement AutoreleasingUnsafeMutablePointer.\Experiment 
///
/// This is a draft API currently under consideration for official import into
/// Foundation as a suitable alternative\Note 
///
/// Since this API is under consideration it may be either removed or revised in the
/// near future
///
/// \param unit the unit to determine the range for
///
/// \param forDate the date to wrap the unit around
///
/// \returns  the range (date interval) of the unit around the date
- (NSDateInterval * _Nullable)rangeOfUnit:(NSCalendarUnit)unit forDate:(NSDate * _Nonnull)date;

/// Create a new NSCalendar with current with settings for the current userâ€™s chosen system locale overlaid with any custom settings the user has specified in System Preferences. Use autoUpdate = false to avoid auto-changes on Settings changes during runtime.
///
/// \param autoUpdate true to get auto-updating calendar
///
/// \returns  a new NSCalendar instance from system settings
+ (NSCalendar * _Null_unspecified)locale:(BOOL)autoUpdate;
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))
- (nonnull instancetype)initWithComponents:(NSDateComponents * _Nonnull)components;

/// Add components to the current absolute time by passing an NSDateComponents intance
///
/// \param components components to add
///
/// \returns  a new absolute time from self plus passed components
- (NSDate * _Nonnull)add:(NSDateComponents * _Nonnull)components;

/// Diffenence between the receiver and toDate for the units provided
///
/// <ul><li>parameters:</li><li>toDate: date to calculate the difference with</li><li>unitFlags: calendar component flags to express the difference in</li></ul>
/// \returns  date components with the difference calculated, <code>nil
/// </code> on error
- (NSDateComponents * _Nullable)difference:(NSDate * _Nonnull)toDate unitFlags:(NSCalendarUnit)unitFlags;

/// The same of calling components() without specify a region: current region is used instead
@property (nonatomic, readonly, strong) NSDateComponents * _Nonnull components;
@end


@interface NSDate (SWIFT_EXTENSION(SwiftDate))

/// Get the year component of the date in current region (use inRegion(...).year to get the year component in specified time zone)
@property (nonatomic, readonly) NSInteger year;

/// Get the month component of the date in current region (use inRegion(...).month to get the month component in specified time zone)
@property (nonatomic, readonly) NSInteger month;

/// Get the month name component of the date in current region (use inRegion(...).monthName to get the month's name component in specified time zone)
@property (nonatomic, readonly, copy) NSString * _Nonnull monthName;

/// Get the week of month component of the date in current region (use inRegion(...).weekOfMonth to get the week of month component in specified time zone)
@property (nonatomic, readonly) NSInteger weekOfMonth;

/// Get the year for week of year component of the date in current region (use inRegion(...).yearForWeekOfYear to get the year week of year component in specified time zone)
@property (nonatomic, readonly) NSInteger yearForWeekOfYear;

/// Get the week of year component of the date in current region (use inRegion(...).weekOfYear to get the week of year component in specified time zone)
@property (nonatomic, readonly) NSInteger weekOfYear;

/// Get the weekday component of the date in current region (use inRegion(...).weekday to get the weekday component in specified time zone)
@property (nonatomic, readonly) NSInteger weekday;

/// Get the weekday ordinal component of the date in current region (use inRegion(...).weekdayOrdinal to get the weekday ordinal component in specified time zone)
@property (nonatomic, readonly) NSInteger weekdayOrdinal;

/// Get the day component of the date in current region (use inRegion(...).day to get the day component in specified time zone)
@property (nonatomic, readonly) NSInteger day;

/// Get the number of days of the current date's month in current region (use inRegion(...).monthDays to get it in specified time zone)
@property (nonatomic, readonly) NSInteger monthDays;

/// Get the hour component of the current date's hour in current region (use inRegion(...).hour to get it in specified time zone)
@property (nonatomic, readonly) NSInteger hour;

/// Get the nearest hour component of the current date's hour in current region (use inRegion(...).nearestHour to get it in specified time zone)
@property (nonatomic, readonly) NSInteger nearestHour;

/// Get the minute component of the current date's minute in current region (use inRegion(...).minute to get it in specified time zone)
@property (nonatomic, readonly) NSInteger minute;

/// Get the second component of the current date's second in current region (use inRegion(...).second to get it in specified time zone)
@property (nonatomic, readonly) NSInteger second;

/// Get the nanoscend component of the current date's nanosecond in current region (use inRegion(...).nanosecond to get it in specified time zone)
@property (nonatomic, readonly) NSInteger nanosecond;

/// Get the era component of the current date's era in current region (use inRegion(...).era to get it in specified time zone)
@property (nonatomic, readonly) NSInteger era;
- (BOOL)isToday;
- (BOOL)isYesterday;
- (BOOL)isTomorrow;
- (BOOL)inSameDayAsDate:(NSDate * _Nonnull)date;
@end


@interface NSDateComponents (SWIFT_EXTENSION(SwiftDate))

/// The same of calling fromNow() with default local region
@property (nonatomic, readonly, strong) NSDate * _Nonnull fromNow;

/// The same of calling ago() with default local region
@property (nonatomic, readonly, strong) NSDate * _Nonnull ago;
@end


@interface NSDateComponentsFormatter (SWIFT_EXTENSION(SwiftDate))
@end


@interface NSDateFormatter (SWIFT_EXTENSION(SwiftDate))
@end



/// Alternative API from swift.org for avoiding AutoreleasingUnsafeMutablePointer usage in NSCalendar and NSFormatter\Experiment 
///
/// This is a draft API currently under consideration for official import into
/// Foundation as a suitable alternative to the AutoreleasingUnsafeMutablePointer usage case of
/// returning a NSDate + NSTimeInterval or using a pair of dates representing a range\Note 
///
/// Since this API is under consideration it may be either removed or revised in the near
/// future
SWIFT_CLASS("_TtC9SwiftDate14NSDateInterval")
@interface NSDateInterval : NSObject
@property (nonatomic, readonly, strong) NSDate * _Nonnull start;
@property (nonatomic, readonly, strong) NSDate * _Nonnull end;
@property (nonatomic, readonly) NSTimeInterval interval;
- (nonnull instancetype)initWithStart:(NSDate * _Nonnull)start end:(NSDate * _Nonnull)end OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithStart:(NSDate * _Nonnull)start interval:(NSTimeInterval)interval;
@end


@interface NSTimeZone (SWIFT_EXTENSION(SwiftDate))

/// Returns a new NSDateComponents object containing the time zone as specified by the receiver
@property (nonatomic, readonly, strong) NSDateComponents * _Nonnull timeZone;
@end

#pragma clang diagnostic pop
